{% extends 'base.html.twig' %}
{% block body %}

    <div class="modal" tabindex="-1" role="dialog" id="reservation-form-modal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Dodawanie rezerwacji</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="reservation-form">
                        <label for="reservation-user">Wybierz użytkownika</label>
                        <select id="reservation-user" class="form-control select2">
                            {% for user in users %}
                                <option value="{{ user.id }}">{{ user.name }} {{  user.surname }}</option>
                            {% endfor %}
                        </select>
                        <label for="reservation-workplace">Wybierz miejsce pracy</label>
                        <select id="reservation-workplace" class="form-control select2">
                            {% for workplace in workplaces %}
                                <option value="{{ workplace.id }}">{{ workplace.name }}</option>
                            {% endfor %}
                        </select>
                        <label for="reservation-date-from">Czas rezerwacji od:</label>
                        <input id="reservation-date-from" name="dateFrom" class="form-control">
                        <label for="reservation-date-to">Czas rezerwacji do:</label>
                        <input id="reservation-date-to" name="dateTo" class="form-control">
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="form-submit" type="button" class="btn btn-primary">Zapisz</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Zamknij</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#reservation-form-modal">
                Dodaj rezerwację
            </button>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <Reservations list_url="{{ url('reservation.api') }}" ref="reservations"></Reservations>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-datetimepicker/2.5.20/jquery.datetimepicker.min.css" integrity="sha256-DOS9W6NR+NFe1fUhEE0PGKY/fubbUCnOfTje2JMDw3Y=" crossorigin="anonymous" />
{% endblock %}

{% block javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-datetimepicker/2.5.20/jquery.datetimepicker.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.25.3/moment-with-locales.min.js"></script>
    <script>
        $('#reservation-date-from').datetimepicker({format: 'Y-m-d H:i', mask: true})
        $('#reservation-date-to').datetimepicker({format: 'Y-m-d H:i', mask: true})
        function isValid(data) {
            if (! data.userId){
                alert('Nie wybrano użytkownika');
                return false;
            }
            if (! data.workplaceId){
                alert('Nie wybrano miejsca pracy');
                return false;
            }
            if (! data.dateFrom){
                alert('Brak daty / godziny rozpoczęcia rezerwacji');
                return false;
            }
            if (! data.dateTo){
                alert('Brak daty / godziny zakończenia rezerwacji');
                return false;
            }
            let dateFrom = moment(data.dateFrom, 'YYYY-MM-DD hh:mm');
            let dateTo = moment(data.dateTo, 'YYYY-MM-DD hh:mm');
            if (! dateFrom.isBefore(dateTo)) {
                alert('Rezerwację należy rozpocząć przed datą zakończenia');
                return false;
            }
            if (dateFrom.isBefore(moment())) {
                alert('Nie można zarezerwować terminu w przeszłości');
                return false;
            }
            let reservations = [];
            $.ajax({
                url: "{{ url('reservation.api') }}",
                async: false,
                success: (data) => {
                    reservations = data;
                }
            });
            for (i in reservations) {
                if (reservations[i].workplace.id == data.workplaceId && (
                        moment(reservations[i].dateFrom).isBetween(dateFrom, dateTo)
                        || moment(reservations[i].dateTo).isBetween(dateFrom, dateTo)
                        || dateFrom.isBetween(moment(reservations[i].dateFrom), moment(reservations[i].dateTo))
                        || dateTo.isBetween(moment(reservations[i].dateFrom), moment(reservations[i].dateTo))))
                {
                    alert('Termin już zajęty');
                    return false;
                }
            }
            return true;
        }
        $('#form-submit').click(() => {
            var formData = {
                userId: $('#reservation-user').val(),
                workplaceId: $('#reservation-workplace').val(),
                dateFrom: $('#reservation-date-from').val(),
                dateTo: $('#reservation-date-to').val()
            };
            if (isValid(formData)) {
                $.ajax({
                    url: "{{ url('reservation.create.api') }}",
                    data: JSON.stringify(formData),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    method: "PUT",
                    success: () => {
                        $root.$refs.reservations.update();
                        $('#reservation-form')[0].reset();
                        $('#reservation-form-modal').modal('hide');
                    },
                    error: () => {
                        alert('Nie udało się zapisać rezerwacji. Sprawdź dane i spróbuj ponownie.')
                    }
                });
            }
        });
    </script>
{% endblock %}